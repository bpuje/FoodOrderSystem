package com.css.challenge.client;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import java.time.Instant;import java.util.ArrayList;import java.util.List;import static org.junit.jupiter.api.Assertions.assertEquals;class StorageSystemTest {    private StorageSystem storageSystem;    private List<Action> actions;    @BeforeEach    void setUp() {        storageSystem = new StorageSystem();        actions = new ArrayList<>();    }    @Test    void testPlaceOrderInCooler() {        Order order = new Order("1", "Salad", "cold", 60);        storageSystem.placeOrder(order, actions);        assertEquals(1, actions.size());        assertEquals("place", actions.get(0).getAction());        assertEquals("1", actions.get(0).getId());    }    @Test    void testPlaceOrderInHeater() {        Order order = new Order("2", "Pizza", "hot", 120);        storageSystem.placeOrder(order, actions);        assertEquals(1, actions.size());        assertEquals("place", actions.get(0).getAction());        assertEquals("2", actions.get(0).getId());    }    @Test    void testPlaceOrderOnShelf() {        // Fill the cooler and heater to force the order onto the shelf        for (int i = 0; i < StorageSystem.COOLER_CAPACITY; i++) {            storageSystem.placeOrder(new Order("cold" + i, "Salad", "cold", 60), actions);        }        for (int i = 0; i < StorageSystem.HEATER_CAPACITY; i++) {            storageSystem.placeOrder(new Order("hot" + i, "Pizza", "hot", 120), actions);        }        Order order = new Order("3", "Sandwich", "room", 90);        storageSystem.placeOrder(order, actions);        assertEquals(StorageSystem.COOLER_CAPACITY + StorageSystem.HEATER_CAPACITY + 1, actions.size());        assertEquals("place", actions.get(actions.size() - 1).getAction());        assertEquals("3", actions.get(actions.size() - 1).getId());    }    @Test    void testDiscardOldestOrderOnShelf() {        // Fill the shelf to capacity        for (int i = 0; i < StorageSystem.SHELF_CAPACITY; i++) {            storageSystem.placeOrder(new Order("shelf" + i, "Sandwich", "room", 90), actions);        }        // Place one more order to trigger a discard        Order order = new Order("newOrder", "Burger", "room", 100);        storageSystem.placeOrder(order, actions);        assertEquals(StorageSystem.SHELF_CAPACITY + 2, actions.size()); // +1 for place, +1 for discard        assertEquals("discard", actions.get(StorageSystem.SHELF_CAPACITY).getAction());        assertEquals("place", actions.get(StorageSystem.SHELF_CAPACITY + 1).getAction());    }    @Test    void testPickupOrder() {        Order order = new Order("1", "Salad", "cold", 60);        storageSystem.placeOrder(order, actions);        storageSystem.pickupOrder("1", actions);        assertEquals(2, actions.size());        assertEquals("pickup", actions.get(1).getAction());        assertEquals("1", actions.get(1).getId());    }    @Test    void testCheckFreshness() {        Order coldOrder = new Order("1", "Salad", "cold", 1); // Freshness of 1 second        Order hotOrder = new Order("2", "Steak", "hot", 1);        coldOrder.setPlacementTime(Instant.now().minusSeconds(2)); // Order is now stale        hotOrder.setPlacementTime(Instant.now().minusSeconds(2));        storageSystem.placeOrder(coldOrder, actions);        storageSystem.placeOrder(hotOrder, actions);        storageSystem.checkFreshness(actions);        assertEquals(2, actions.size()); // 1 for place, 1 for discard        assertEquals("2", actions.get(1).getId());    }    @Test    void testMoveOrderToCooler() {        // Fill the cooler to force the order onto the shelf        for (int i = 0; i < StorageSystem.COOLER_CAPACITY; i++) {            storageSystem.placeOrder(new Order("cold" + i, "Salad", "cold", 60), actions);        }        Order order1 = new Order("1", "Salad", "cold", 60);        Order order2 = new Order("2", "Ice cream", "cold", 60);        Order order3 = new Order("2", "Milk", "cold", 60);        storageSystem.placeOrder(order1, actions);        storageSystem.placeOrder(order2, actions);        storageSystem.placeOrder(order3, actions);        // Free up space in the cooler        storageSystem.pickupOrder("cold0", actions);        // Move the order from the shelf to the cooler        storageSystem.optimizeStorage(actions);        assertEquals(10, actions.size());        assertEquals("cold2", actions.get(2).getId());    }    @Test    void testMoveOrderToHeater() {        // Fill the heater to force the order onto the shelf        for (int i = 0; i < StorageSystem.HEATER_CAPACITY; i++) {            storageSystem.placeOrder(new Order("hot" + i, "Pizza", "hot", 120), actions);        }        Order order = new Order("1", "Pizza", "hot", 120);        storageSystem.placeOrder(order, actions);        // Free up space in the heater        storageSystem.pickupOrder("hot0", actions);        // Move the order from the shelf to the heater        storageSystem.optimizeStorage(actions);        assertEquals(8, actions.size());        assertEquals("hot2", actions.get(2).getId());    }    @Test    void testPlaceAndPickupOrder() {        StorageSystem storageSystem = new StorageSystem();        List<Action> actions = new ArrayList<>();        Order order1 = new Order("1", "Pizza", "hot", 120);        Order order2 = new Order("2", "Salad", "cold", 60);        storageSystem.placeOrder(order1, actions);        storageSystem.placeOrder(order2, actions);        assertEquals(2, actions.size());        assertEquals("place", actions.get(0).getAction());        assertEquals("place", actions.get(1).getAction());        storageSystem.pickupOrder("1", actions);        assertEquals(3, actions.size());        assertEquals("pickup", actions.get(2).getAction());    }}