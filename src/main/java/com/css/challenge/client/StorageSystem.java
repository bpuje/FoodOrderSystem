package com.css.challenge.client;import java.time.Duration;import java.time.Instant;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;public class StorageSystem {    private final Map<String, Order> cooler = new LinkedHashMap<>();    private final Map<String, Order> heater = new LinkedHashMap<>();    private final Map<String, Order> shelf = new LinkedHashMap<>();    public static final int COOLER_CAPACITY = 6;    public static final int HEATER_CAPACITY = 6;    public static final int SHELF_CAPACITY = 12;    /**     * Places an order in the appropriate storage unit based on its temperature.     * If the ideal storage is full, the order is placed on the shelf.     * If the shelf is also full, the oldest order on the shelf is discarded.     *     * @param order   The order to be placed.     * @param actions The list of actions to record the placement.     */    public synchronized void placeOrder(Order order, List<Action> actions) {        Instant now = Instant.now();        order.setPlacementTime(now); // Set the placement time when the order is placed        if (order.getTemp().equals("cold")) {            if (cooler.size() < COOLER_CAPACITY) {                cooler.put(order.getId(), order);                actions.add(new Action(now, order.getId(), Action.PLACE));            } else {                placeOnShelf(order, actions);            }        } else if (order.getTemp().equals("hot")) {            if (heater.size() < HEATER_CAPACITY) {                heater.put(order.getId(), order);                actions.add(new Action(now, order.getId(), Action.PLACE));            } else {                placeOnShelf(order, actions);            }        } else {            placeOnShelf(order, actions);        }    }    /**     * Places an order on the shelf. If the shelf is full, the oldest order is discarded.     *     * @param order   The order to be placed on the shelf.     * @param actions The list of actions to record the placement or discard.     */    private void placeOnShelf(Order order, List<Action> actions) {        Instant now = Instant.now();        if (shelf.size() < SHELF_CAPACITY) {            shelf.put(order.getId(), order);            actions.add(new Action(now, order.getId(), Action.PLACE));        } else {            discardOldestOrderOnShelf(actions);            placeOnShelf(order, actions); // Try again after making space        }    }    /**     * Discards the oldest order on the shelf to make room for a new order.     *     * @param actions The list of actions to record the discard.     */    private void discardOldestOrderOnShelf(List<Action> actions) {        Instant now = Instant.now();        String oldestOrderId = shelf.keySet().iterator().next();        shelf.remove(oldestOrderId);        actions.add(new Action(now, oldestOrderId, Action.DISCARD));    }    /**     * Picks up an order and removes it from the storage system.     *     * @param orderId The ID of the order to be picked up.     * @param actions The list of actions to record the pickup.     */    public synchronized void pickupOrder(String orderId, List<Action> actions) {        Instant now = Instant.now();        if (cooler.containsKey(orderId)) {            cooler.remove(orderId);        } else if (heater.containsKey(orderId)) {            heater.remove(orderId);        } else if (shelf.containsKey(orderId)) {            shelf.remove(orderId);        }        actions.add(new Action(now, orderId, Action.PICKUP));    }    /**     * Checks the freshness of all orders in the storage system and discards stale orders.     *     * @param actions The list of actions to record discards.     */    public synchronized void checkFreshness(List<Action> actions) {        Instant now = Instant.now();        checkFreshnessInStorage(cooler, now, actions);        checkFreshnessInStorage(heater, now, actions);        checkFreshnessInStorage(shelf, now, actions);    }    /**     * Checks the freshness of orders in a specific storage unit and discards stale orders.     *     * @param storage The storage unit to check (cooler, heater, or shelf).     * @param now     The current time.     * @param actions The list of actions to record discards.     */    private void checkFreshnessInStorage(Map<String, Order> storage, Instant now, List<Action> actions) {        Iterator<Map.Entry<String, Order>> iterator = storage.entrySet().iterator();        while (iterator.hasNext()) {            Map.Entry<String, Order> entry = iterator.next();            Order order = entry.getValue();            long freshnessDuration = order.getFreshness() * 1000L; // Convert to milliseconds            if (Duration.between(order.getPlacementTime(), now).toMillis() > freshnessDuration) {                iterator.remove();                actions.add(new Action(now, order.getId(), Action.DISCARD));            }        }    }    /**     * Moves orders from the shelf to the cooler or heater if space is available and the shelf is full.     *     * @param actions The list of actions to record the moves.     */    public synchronized void optimizeStorage(List<Action> actions) {        Instant now = Instant.now();        // Only attempt to move orders if the shelf is full        if (shelf.size() >= SHELF_CAPACITY) {            Iterator<Map.Entry<String, Order>> iterator = shelf.entrySet().iterator();            while (iterator.hasNext()) {                Map.Entry<String, Order> entry = iterator.next();                Order order = entry.getValue();                // Check if the order can be moved to the cooler                if (order.getTemp().equals("cold") && cooler.size() < COOLER_CAPACITY) {                    iterator.remove();                    cooler.put(order.getId(), order);                    actions.add(new Action(now, order.getId(), Action.MOVE));                    break; // Move only one order at a time                }                // Check if the order can be moved to the heater                if (order.getTemp().equals("hot") && heater.size() < HEATER_CAPACITY) {                    iterator.remove();                    heater.put(order.getId(), order);                    actions.add(new Action(now, order.getId(), Action.MOVE));                    break; // Move only one order at a time                }            }        }    }}